struct Foo
  @str : String
  @int : Int32

  def initialize(@str = "foo", @int = 111)
  end

  def []=(variable, value)
    {% for ivar in @type.instance_vars %}
      if {{ivar.id.symbolize}} == variable
        if value.is_a?({{ ivar.type.id }})
          @{{ivar}} = value
        else
          raise "Invalid type #{value.class} for {{ivar.id.symbolize}} (expected {{ ivar.type.id }})"
        end
      end
    {% end %}
  end
end

foo = Foo.new
foo[:str] = "bar"
foo[:int] = 222
foo[:int] = "string"  # => Invalid type String for :int (expected Int32)

------------------------------------------------------------------------------------------------------------------------------

module Helper
  struct Data
    getter app_name : String = "AppName"
    getter value : Int32 | Nil = 32
  end
  
  struct Person
    @name : String = "Gene"
    @age : Int32 = 28
    @data : Data = Helper::Data.new

    def [](var_name)
      {% for ivar in @type.instance_vars %}
        if {{ ivar.name.stringify }} == var_name
          return {{ ivar.default_value }}
        end
      {% end %}
    end

    def instance_vars_name_and_type?
      {% if @type.instance_vars.size > 0 %}
        return Hash.zip(
          {{ @type.instance_vars.map &.name.stringify }},
          {{ @type.instance_vars.map &.type }}
        )
      {% end %}
      nil
    end
    
    def instance_var_type(var_name : String)
      {% for ivar in @type.instance_vars %}
        if {{ ivar.name.stringify }} == var_name
          return {{ ivar.type }}
        end
      {% end %}
    end
  end
end

person = Helper::Person.new
p! person["age"] # => 28
p! person["name"] # => "Gene"
p! person["data"] # => Helper::Data(@app_name="AppName", @value=32)
p! person["data"].as(Helper::Data).value
p! person.instance_vars_name_and_type?
p! person.instance_var_type("data") # => Helper::Data
